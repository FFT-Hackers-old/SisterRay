// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_defs/mod_manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_5fdefs_2fmod_5fmanifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_5fdefs_2fmod_5fmanifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_5fdefs_2fmod_5fmanifest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_5fdefs_2fmod_5fmanifest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_5fdefs_2fmod_5fmanifest_2eproto;
class ModManifest;
class ModManifestDefaultTypeInternal;
extern ModManifestDefaultTypeInternal _ModManifest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ModManifest* Arena::CreateMaybeMessage<::ModManifest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ModManifest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModManifest) */ {
 public:
  inline ModManifest() : ModManifest(nullptr) {};
  virtual ~ModManifest();

  ModManifest(const ModManifest& from);
  ModManifest(ModManifest&& from) noexcept
    : ModManifest() {
    *this = ::std::move(from);
  }

  inline ModManifest& operator=(const ModManifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModManifest& operator=(ModManifest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModManifest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModManifest* internal_default_instance() {
    return reinterpret_cast<const ModManifest*>(
               &_ModManifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModManifest& a, ModManifest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModManifest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModManifest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModManifest* New() const final {
    return CreateMaybeMessage<ModManifest>(nullptr);
  }

  ModManifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModManifest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModManifest& from);
  void MergeFrom(const ModManifest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModManifest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModManifest";
  }
  protected:
  explicit ModManifest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_5fdefs_2fmod_5fmanifest_2eproto);
    return ::descriptor_table_proto_5fdefs_2fmod_5fmanifest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepsFieldNumber = 2,
    kModNameFieldNumber = 1,
  };
  // repeated string deps = 2;
  int deps_size() const;
  private:
  int _internal_deps_size() const;
  public:
  void clear_deps();
  const std::string& deps(int index) const;
  std::string* mutable_deps(int index);
  void set_deps(int index, const std::string& value);
  void set_deps(int index, std::string&& value);
  void set_deps(int index, const char* value);
  void set_deps(int index, const char* value, size_t size);
  std::string* add_deps();
  void add_deps(const std::string& value);
  void add_deps(std::string&& value);
  void add_deps(const char* value);
  void add_deps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deps();
  private:
  const std::string& _internal_deps(int index) const;
  std::string* _internal_add_deps();
  public:

  // string modName = 1;
  void clear_modname();
  const std::string& modname() const;
  void set_modname(const std::string& value);
  void set_modname(std::string&& value);
  void set_modname(const char* value);
  void set_modname(const char* value, size_t size);
  std::string* mutable_modname();
  std::string* release_modname();
  void set_allocated_modname(std::string* modname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modname(
      std::string* modname);
  private:
  const std::string& _internal_modname() const;
  void _internal_set_modname(const std::string& value);
  std::string* _internal_mutable_modname();
  public:

  // @@protoc_insertion_point(class_scope:ModManifest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_5fdefs_2fmod_5fmanifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModManifest

// string modName = 1;
inline void ModManifest::clear_modname() {
  modname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ModManifest::modname() const {
  // @@protoc_insertion_point(field_get:ModManifest.modName)
  return _internal_modname();
}
inline void ModManifest::set_modname(const std::string& value) {
  _internal_set_modname(value);
  // @@protoc_insertion_point(field_set:ModManifest.modName)
}
inline std::string* ModManifest::mutable_modname() {
  // @@protoc_insertion_point(field_mutable:ModManifest.modName)
  return _internal_mutable_modname();
}
inline const std::string& ModManifest::_internal_modname() const {
  return modname_.Get();
}
inline void ModManifest::_internal_set_modname(const std::string& value) {
  
  modname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModManifest::set_modname(std::string&& value) {
  
  modname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModManifest.modName)
}
inline void ModManifest::set_modname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ModManifest.modName)
}
inline void ModManifest::set_modname(const char* value,
    size_t size) {
  
  modname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModManifest.modName)
}
inline std::string* ModManifest::_internal_mutable_modname() {
  
  return modname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModManifest::release_modname() {
  // @@protoc_insertion_point(field_release:ModManifest.modName)
  return modname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModManifest::set_allocated_modname(std::string* modname) {
  if (modname != nullptr) {
    
  } else {
    
  }
  modname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ModManifest.modName)
}
inline std::string* ModManifest::unsafe_arena_release_modname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ModManifest.modName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return modname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ModManifest::unsafe_arena_set_allocated_modname(
    std::string* modname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modname != nullptr) {
    
  } else {
    
  }
  modname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ModManifest.modName)
}

// repeated string deps = 2;
inline int ModManifest::_internal_deps_size() const {
  return deps_.size();
}
inline int ModManifest::deps_size() const {
  return _internal_deps_size();
}
inline void ModManifest::clear_deps() {
  deps_.Clear();
}
inline std::string* ModManifest::add_deps() {
  // @@protoc_insertion_point(field_add_mutable:ModManifest.deps)
  return _internal_add_deps();
}
inline const std::string& ModManifest::_internal_deps(int index) const {
  return deps_.Get(index);
}
inline const std::string& ModManifest::deps(int index) const {
  // @@protoc_insertion_point(field_get:ModManifest.deps)
  return _internal_deps(index);
}
inline std::string* ModManifest::mutable_deps(int index) {
  // @@protoc_insertion_point(field_mutable:ModManifest.deps)
  return deps_.Mutable(index);
}
inline void ModManifest::set_deps(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ModManifest.deps)
  deps_.Mutable(index)->assign(value);
}
inline void ModManifest::set_deps(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ModManifest.deps)
  deps_.Mutable(index)->assign(std::move(value));
}
inline void ModManifest::set_deps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ModManifest.deps)
}
inline void ModManifest::set_deps(int index, const char* value, size_t size) {
  deps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ModManifest.deps)
}
inline std::string* ModManifest::_internal_add_deps() {
  return deps_.Add();
}
inline void ModManifest::add_deps(const std::string& value) {
  deps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ModManifest.deps)
}
inline void ModManifest::add_deps(std::string&& value) {
  deps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ModManifest.deps)
}
inline void ModManifest::add_deps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ModManifest.deps)
}
inline void ModManifest::add_deps(const char* value, size_t size) {
  deps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ModManifest.deps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModManifest::deps() const {
  // @@protoc_insertion_point(field_list:ModManifest.deps)
  return deps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModManifest::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:ModManifest.deps)
  return &deps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_5fdefs_2fmod_5fmanifest_2eproto
